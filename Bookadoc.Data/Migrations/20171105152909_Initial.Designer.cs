// <auto-generated />
using Bookadoc.Core.Models;
using Bookadoc.Data.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace Bookadoc.Data.Migrations
{
    [DbContext(typeof(BookadocContext))]
    [Migration("20171105152909_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Bookadoc.Core.Models.Address", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int?>("CityId");

                    b.Property<int>("IdCity");

                    b.Property<string>("MainLine");

                    b.Property<int>("PostCode");

                    b.Property<string>("SecondaryLine");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Bookadoc.Core.Models.City", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("IdCountry");

                    b.Property<int>("IdState");

                    b.Property<string>("Name");

                    b.Property<int?>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("IdCountry");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Bookadoc.Core.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Bookadoc.Core.Models.Degree", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Degrees");
                });

            modelBuilder.Entity("Bookadoc.Core.Models.Disease", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("Bookadoc.Core.Models.DoctorDegree", b =>
                {
                    b.Property<int>("DoctorId");

                    b.Property<int>("DegreeId");

                    b.HasKey("DoctorId", "DegreeId");

                    b.HasIndex("DegreeId");

                    b.ToTable("DoctorDegree");
                });

            modelBuilder.Entity("Bookadoc.Core.Models.DoctorSpeciality", b =>
                {
                    b.Property<int>("DoctorId");

                    b.Property<int>("SpecialityId");

                    b.HasKey("DoctorId", "SpecialityId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("DoctorSpeciality");
                });

            modelBuilder.Entity("Bookadoc.Core.Models.PatientDiseaseHistory", b =>
                {
                    b.Property<int>("PatientId");

                    b.Property<int>("DiseaseId");

                    b.HasKey("PatientId", "DiseaseId");

                    b.HasIndex("DiseaseId");

                    b.ToTable("PatientDiseaseHistory");
                });

            modelBuilder.Entity("Bookadoc.Core.Models.Phone", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("Number");

                    b.Property<int>("Type");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("Bookadoc.Core.Models.Speciality", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("Bookadoc.Core.Models.State", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int?>("CountryId");

                    b.Property<int>("IdCountry");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Bookadoc.Core.Models.User", b =>
                {
                    b.Property<int>("Id");

                    b.Property<bool>("Active");

                    b.Property<string>("Email");

                    b.Property<string>("LastName");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<int>("UserTypeId");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<int>("UserTypeId").HasValue(3);
                });

            modelBuilder.Entity("Bookadoc.Core.Models.Doctor", b =>
                {
                    b.HasBaseType("Bookadoc.Core.Models.User");


                    b.ToTable("Doctor");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Bookadoc.Core.Models.Patient", b =>
                {
                    b.HasBaseType("Bookadoc.Core.Models.User");

                    b.Property<decimal>("Height");

                    b.Property<decimal>("Weight");

                    b.ToTable("Patient");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Bookadoc.Core.Models.Address", b =>
                {
                    b.HasOne("Bookadoc.Core.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Bookadoc.Core.Models.User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Bookadoc.Core.Models.City", b =>
                {
                    b.HasOne("Bookadoc.Core.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("IdCountry")
                        .HasConstraintName("ForeignKey_City_Country")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bookadoc.Core.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("Bookadoc.Core.Models.DoctorDegree", b =>
                {
                    b.HasOne("Bookadoc.Core.Models.Degree", "Degree")
                        .WithMany("DoctorsDegrees")
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bookadoc.Core.Models.Doctor", "Doctor")
                        .WithMany("DoctorDegrees")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bookadoc.Core.Models.DoctorSpeciality", b =>
                {
                    b.HasOne("Bookadoc.Core.Models.Doctor", "Doctor")
                        .WithMany("DoctorSpecialities")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bookadoc.Core.Models.Speciality", "Speciality")
                        .WithMany("DoctorSpecialities")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bookadoc.Core.Models.PatientDiseaseHistory", b =>
                {
                    b.HasOne("Bookadoc.Core.Models.Disease", "Disease")
                        .WithMany("PatientsDiseases")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bookadoc.Core.Models.Patient", "Patient")
                        .WithMany("PatientsDiseases")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bookadoc.Core.Models.Phone", b =>
                {
                    b.HasOne("Bookadoc.Core.Models.User")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Bookadoc.Core.Models.State", b =>
                {
                    b.HasOne("Bookadoc.Core.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");
                });
#pragma warning restore 612, 618
        }
    }
}
